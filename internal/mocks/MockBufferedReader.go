// Code generated by MockGen. DO NOT EDIT.
// Source: bufferedReader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBufferedReader is a mock of BufferedReader interface.
type MockBufferedReader struct {
	ctrl     *gomock.Controller
	recorder *MockBufferedReaderMockRecorder
}

// MockBufferedReaderMockRecorder is the mock recorder for MockBufferedReader.
type MockBufferedReaderMockRecorder struct {
	mock *MockBufferedReader
}

// NewMockBufferedReader creates a new mock instance.
func NewMockBufferedReader(ctrl *gomock.Controller) *MockBufferedReader {
	mock := &MockBufferedReader{ctrl: ctrl}
	mock.recorder = &MockBufferedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferedReader) EXPECT() *MockBufferedReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBufferedReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBufferedReaderMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBufferedReader)(nil).Read), p)
}

// ReadBytes mocks base method.
func (m *MockBufferedReader) ReadBytes(delim byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBytes", delim)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBytes indicates an expected call of ReadBytes.
func (mr *MockBufferedReaderMockRecorder) ReadBytes(delim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBytes", reflect.TypeOf((*MockBufferedReader)(nil).ReadBytes), delim)
}

// ReadString mocks base method.
func (m *MockBufferedReader) ReadString(delim byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadString", delim)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadString indicates an expected call of ReadString.
func (mr *MockBufferedReaderMockRecorder) ReadString(delim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadString", reflect.TypeOf((*MockBufferedReader)(nil).ReadString), delim)
}
